{"version":3,"file":"static/js/37.416bd992.chunk.js","mappings":"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","sources":["components/AdminJobCard.js","screens/AdminJobscreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from 'react-bootstrap/Col';\r\nimport { Row,Modal } from 'react-bootstrap';\r\nimport '../components/AdminJobcard.css';\r\nimport JobUpdateModal from '../components/updatepopup'\r\n\r\n\r\nfunction AdminJobCard(props) {\r\n  const { jobTitle, companyName, jobDescription, salary, location, highestQualification , postedBy, createdAt, updatedAt, jobId, onDelete, upJobId } = props;\r\n  const [hovered, setHovered] = useState(false);\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\r\n\r\n\r\n  const handleDelete = () => {\r\n    onDelete(jobId);\r\n    setShowModal(false);\r\n  }\r\n  const handleUpdate = () => {\r\n    setShowUpdateModal(true);\r\n  };\r\n  \r\n\r\n  return(\r\n    <Col xs={12} md={6} lg={6} xl={4} xxl={3}>\r\n      <div style={{ padding: '10px' }}>\r\n        <Card\r\n        style={{ border: '3px dashed rgba(44, 41, 41, 0.400'}}\r\n          // style={{ width: '100%' }}\r\n          className={hovered ? 'job-card hovered' : 'job-card'}\r\n          onMouseEnter={() => setHovered(true)}\r\n          onMouseLeave={() => setHovered(false)}\r\n        >\r\n          \r\n          <Card.Body className='jobCard'>\r\n            <Card.Title className='text-primary text-center'>{jobTitle}</Card.Title>\r\n            <br></br>\r\n            <Card.Text className=\"mb-2\">Company: {companyName}</Card.Text>\r\n\r\n            <Card.Text className=\"mb-2\">Qualification: {highestQualification}</Card.Text>\r\n            <Card.Text className=\"mb-2\">Job Location: {location}</Card.Text>\r\n            <Card.Text>Salary: {salary}/- INR</Card.Text>\r\n            <Card.Text>Description:<br></br>{jobDescription}</Card.Text>\r\n            <Card.Text className=\"smalltext text-muted\">Job listing created at: {createdAt}</Card.Text>\r\n            <Card.Text className=\"smalltext text-muted\">Job listing updated at: {updatedAt}</Card.Text>\r\n            <Card.Text className=\"smalltext text-muted\">Posted By: {postedBy}</Card.Text>\r\n\r\n            {/* <Button variant=\"dark\"  block href=\"#\">Apply Now</Button> */}\r\n            <Row>\r\n            <Col xs={6} sm={6}>\r\n          {/* <Button variant=\"dark\" size=\"sm\" block href=\"#\">Update</Button> */}\r\n          <Button variant=\"dark\" size=\"sm\" block onClick={handleUpdate}>\r\n  Update\r\n</Button>\r\n\r\n            </Col>\r\n              <Col xs={6} sm={6}>\r\n                <Button variant=\"outline-danger\" size=\"sm\" block onClick={() => setShowModal(true)}>Delete</Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n\r\n      <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Confirm Deletion</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='smalltext'>Are you sure you want to delete this job listing?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" size='sm' onClick={() => setShowModal(false)}>Cancel</Button>\r\n          <Button variant=\"danger\" size='sm' onClick={handleDelete}>Delete</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <JobUpdateModal\r\n  show={showUpdateModal}\r\n  onHide={() => {\r\n    setShowUpdateModal(false);\r\n  }}\r\n\r\nupJobId={upJobId}\r\njobTitle = {jobTitle}\r\ncompanyName = {companyName}\r\njobDescription={jobDescription}\r\nsalary = {salary}\r\nlocation = {location}\r\nhighestQualification = {highestQualification}\r\npostedBy = {postedBy}\r\ncreatedAt = {createdAt}\r\nupdatedAt = {updatedAt}\r\n/>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default AdminJobCard;","import React, { useEffect, useState } from \"react\";\r\nimport JobCard from \"../components/AdminJobCard\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row } from \"react-bootstrap\";\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\n\r\n\r\nconst JobScreen = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      fetch(\"http://localhost:4000/jobs\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const formattedJobs = data.jobs.map((job) => {\r\n            const createdAt = new Date(job.createdAt).toLocaleString(\"en-US\", { timeZone: \"Asia/Kolkata\" }) + \" IST\";\r\n            const updatedAt = new Date(job.updatedAt).toLocaleString(\"en-US\", { timeZone: \"Asia/Kolkata\" }) + \" IST\";\r\n            return {\r\n              ...job,\r\n              createdAt,\r\n              updatedAt,\r\n            };\r\n          });\r\n          setJobs(formattedJobs);\r\n        })\r\n        .catch((error) => console.log(error));\r\n    };\r\n  \r\n    const intervalId = setInterval(() => {\r\n      fetchData();\r\n    }, 1500); // 5000 milliseconds = 5 seconds\r\n  \r\n    fetchData(); // fetch data for the first time when the component mounts\r\n  \r\n    return () => clearInterval(intervalId); // clean up the interval on component unmount\r\n  }, []);\r\n    \r\n\r\n  const handleDelete = (id) => {\r\n    fetch(`http://localhost:4000/jobs/${id}`, { method: 'DELETE' })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Remove the deleted job from the state\r\n        setJobs((prevJobs) => prevJobs.filter((job) => job._id !== id));\r\n        console.log(data.message);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n//    const handleUpdate = () => {\r\n//     <updatepopup/>\r\n//    };\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container>\r\n        <div>\r\n          <br></br>\r\n          <h2 className=\"text-center\">Admin Dashboard: Manage Job Postings</h2>\r\n          <br></br>\r\n        </div>\r\n        <Row>\r\n          {Array.isArray(jobs) && jobs.length > 0 ? (\r\n            jobs.map((job) => (\r\n              <JobCard\r\n                key={job._id}\r\n                jobTitle={job.jobTitle}\r\n                companyName={job.companyName}\r\n                jobDescription={job.jobDescription}\r\n                salary={job.salary}\r\n                location={job.location}\r\n                highestQualification={job.highestQualification}\r\n                postedBy={job.postedBy}\r\n                createdAt={job.createdAt}\r\n                updatedAt={job.updatedAt}\r\n                onDelete={() => handleDelete(job._id)}\r\n                upJobId={job._id}\r\n                // onUpdate={() => handleUpdate()}              \r\n                >\r\n              </JobCard>\r\n            ))\r\n          ) : (\r\n            <p>No jobs available.</p>\r\n          )}\r\n        </Row>\r\n      </Container>\r\n\r\n      <Footer/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobScreen;\r\n"],"names":["props","jobTitle","companyName","jobDescription","salary","location","highestQualification","postedBy","createdAt","updatedAt","jobId","onDelete","upJobId","_useState","useState","_useState2","_slicedToArray","hovered","setHovered","_useState3","_useState4","showModal","setShowModal","_useState5","_useState6","showUpdateModal","setShowUpdateModal","_jsxs","Col","xs","md","lg","xl","xxl","children","_jsx","style","padding","Card","border","className","onMouseEnter","onMouseLeave","Row","sm","Button","variant","size","block","onClick","Modal","show","onHide","closeButton","JobUpdateModal","jobs","setJobs","useEffect","fetchData","fetch","then","response","json","data","formattedJobs","map","job","Date","toLocaleString","timeZone","_objectSpread","catch","error","console","log","intervalId","setInterval","clearInterval","_Fragment","Header","Container","Array","isArray","length","JobCard","id","_id","concat","method","prevJobs","filter","message","Footer"],"sourceRoot":""}